<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <script type="text/javascript">
        var gl;
        var shaderProgram;
        var uPMatrix;
        var vertexPositionBuffer;
        var vertexColorBuffer;

        
        function MatrixMul(mat1, mat2)
        {
            res = [
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            ];
            for (let i = 0; i < 4; i++) {

                for (let j = 0; j < 4; j++) {

                    res[i * 4 + j] = 0.0;

                    for (let k = 0; k < 4; k++) {

                        res[i * 4 + j] += mat1[i * 4 + k] * mat2[k * 4 + j];
                    }
                }
            }
            return res;
        }
        
        function MatrixTranspose(mat)
        {
            res = [
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            ];

            for (let i = 0; i < 4; i++) {

                for (let j = 0; j < 4; j++) {

                    res[i * 4 + j] = mat[j * 4 + i];
                }
            }
            return res;
        }
        function startGL()
        {
            
            let canvas = document.getElementById('canvas3D');
            gl = canvas.getContext('experimental-webgl');
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
          
            const vertextShaderSource = `
            precision highp float;
            attribute vec3 aVertexPosition;
            attribute vec3 aVertexColor;
            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;
            uniform float uBrightness;
            varying vec3 vColor;

            void main(void) {

                gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
                gl_PointSize = 3.0;
                vColor = aVertexColor * uBrightness;
            }
            `;
        const fragmentShaderSource = `
        precision highp float;
        varying vec3 vColor;

        void main(void) {

            gl_FragColor = vec4(vColor,0.5);
        }
        `;
        let fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        let vertexShader   = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(fragmentShader, fragmentShaderSource);
        gl.shaderSource(vertexShader, vertextShaderSource);
        gl.compileShader(fragmentShader);
        gl.compileShader(vertexShader);

        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
            
            alert(gl.getShaderInfoLog(fragmentShader));
            return null;
        }
        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
            
            alert(gl.getShaderInfoLog(vertexShader));
            return null;
        }

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) alert('Could not initialise shaders');
        
       
        let vertexPosition = [];

            vertexPosition.push(-1);vertexPosition.push(1);vertexPosition.push(-1);
            vertexPosition.push(-1);vertexPosition.push(1);vertexPosition.push(1);
            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(1);

            vertexPosition.push(-1);vertexPosition.push(1);vertexPosition.push(-1);
            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(1);
            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(-1);

            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(-1);
            vertexPosition.push(-1);vertexPosition.push(1);vertexPosition.push(1);
            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(-1);

            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(-1);
            vertexPosition.push(-1);vertexPosition.push(1);vertexPosition.push(1);
            vertexPosition.push(-1);vertexPosition.push(1);vertexPosition.push(-1);


            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(1);
            vertexPosition.push(1);vertexPosition.push(-1);vertexPosition.push(1);
            vertexPosition.push(1);vertexPosition.push(-1);vertexPosition.push(-1);

            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(1);
            vertexPosition.push(1);vertexPosition.push(-1);vertexPosition.push(-1);
            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(-1);

            vertexPosition.push(1);vertexPosition.push(-1);vertexPosition.push(1);
            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(1);
            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(1);

            vertexPosition.push(-1);vertexPosition.push(1);vertexPosition.push(1);
            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(1);
            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(1);

            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(-1);
            vertexPosition.push(1);vertexPosition.push(-1);vertexPosition.push(-1);
            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(-1);

            vertexPosition.push(1);vertexPosition.push(1);vertexPosition.push(-1);
            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(-1);
            vertexPosition.push(-1);vertexPosition.push(1);vertexPosition.push(-1);

            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(1);
            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(-1);
            vertexPosition.push(1);vertexPosition.push(-1);vertexPosition.push(1);

            vertexPosition.push(1);vertexPosition.push(-1);vertexPosition.push(1);
            vertexPosition.push(-1);vertexPosition.push(-1);vertexPosition.push(-1);
            vertexPosition.push(1);vertexPosition.push(-1);vertexPosition.push(-1);


        vertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPosition), gl.STATIC_DRAW);
        vertexPositionBuffer.itemSize = 3;
        vertexPositionBuffer.numItems = 12;
        
        let vertexColor =[];
         
            vertexColor.push(0.1);vertexColor.push(0);vertexColor.push(1);
            vertexColor.push(0.1);vertexColor.push(0);vertexColor.push(1);
            vertexColor.push(0.1);vertexColor.push(0);vertexColor.push(1);
 
            vertexColor.push(0.1);vertexColor.push(0);vertexColor.push(1);
            vertexColor.push(0.1);vertexColor.push(0);vertexColor.push(1);
            vertexColor.push(0.1);vertexColor.push(0);vertexColor.push(1);
 
            vertexColor.push(1);vertexColor.push(1);vertexColor.push(0.2);
            vertexColor.push(1);vertexColor.push(1);vertexColor.push(0.2);
            vertexColor.push(1);vertexColor.push(1);vertexColor.push(0.2);
 
            vertexColor.push(1);vertexColor.push(1);vertexColor.push(0.2);
            vertexColor.push(1);vertexColor.push(1);vertexColor.push(0.2);
            vertexColor.push(1);vertexColor.push(1);vertexColor.push(0.2);

            vertexColor.push(1);vertexColor.push(0);vertexColor.push(0.3);
            vertexColor.push(1);vertexColor.push(0);vertexColor.push(0.3);
            vertexColor.push(1);vertexColor.push(0);vertexColor.push(0.3);
 
            vertexColor.push(1);vertexColor.push(0);vertexColor.push(0.3);
            vertexColor.push(1);vertexColor.push(0);vertexColor.push(0.3);
            vertexColor.push(1);vertexColor.push(0);vertexColor.push(0.3);
 
            vertexColor.push(0.4);vertexColor.push(0.3);vertexColor.push(1);
            vertexColor.push(0.4);vertexColor.push(0.3);vertexColor.push(1);
            vertexColor.push(0.4);vertexColor.push(0.3);vertexColor.push(1);
 
            vertexColor.push(0.4);vertexColor.push(0.3);vertexColor.push(1);
            vertexColor.push(0.4);vertexColor.push(0.3);vertexColor.push(1);
            vertexColor.push(0.4);vertexColor.push(0.3);vertexColor.push(1);

            vertexColor.push(1);vertexColor.push(0.5);vertexColor.push(0.4);
            vertexColor.push(1);vertexColor.push(0.5);vertexColor.push(0.4);
            vertexColor.push(1);vertexColor.push(0.5);vertexColor.push(0.4);
 
            vertexColor.push(1);vertexColor.push(0.5);vertexColor.push(0.4);
            vertexColor.push(1);vertexColor.push(0.5);vertexColor.push(0.4);
            vertexColor.push(1);vertexColor.push(0.5);vertexColor.push(0.4);
 
            vertexColor.push(0.1);vertexColor.push(0.3);vertexColor.push(1);
            vertexColor.push(0.1);vertexColor.push(0.3);vertexColor.push(1);
            vertexColor.push(0.1);vertexColor.push(0.3);vertexColor.push(1);
 
            vertexColor.push(0.1);vertexColor.push(0.3);vertexColor.push(1);
            vertexColor.push(0.1);vertexColor.push(0.3);vertexColor.push(1);
            vertexColor.push(0.1);vertexColor.push(0.3);vertexColor.push(1);

        vertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexColor), gl.STATIC_DRAW);
        vertexColorBuffer.itemSize = 3;
        vertexColorBuffer.numItems = 12;
        

        let aspect = gl.viewportWidth / (gl.viewportHeight);
       
        let fov = 45.0 * Math.PI / 180.0;
        let zFar = 100.0;
        let zNear = 0.1;

        uPMatrix = [
        1.0 / (aspect * Math.tan(fov / 2)), 0                        , 0                                    , 0,
        0                                 , 1.0 / (Math.tan(fov / 2)), 0                                    , 0,
        0                                 , 0                        , -(zFar + zNear) / (zFar - zNear)     , -1,
        0                                 , 0                        , -(2 * zFar * zNear) / (zFar - zNear) , 0.0,
        ];

        Tick();
        }

        var angle = 20.0;
        var angleZ = 0.0;
        var angleY = 0.0;
        var angleX = 0.0;
        var translateZ = -20.0;
        var translateY = -6.0;
        var translateX = -7.0;
        var translateZ2 = 0.0;
        var translateY2 = -2.0;
        var translateX2 = 0.0;

        var aMap7x7 = [
        1, 1, 1, 1, 1, 1, 1,
        1, 0, 0, 0, 0, 1, 1,
        0, 0, 1, 1, 0, 0, 1,
        1, 1, 1, 1, 1, 0, 1,
        0, 1, 0, 0, 0, 0, 1,
        1, 0, 0, 1, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1,
        ]

        function Tick()
        {
            let uMVMatrix = MatrixTranspose([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1,
            ]);
            let uMVTranslateConstX = MatrixTranspose([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            2, 0, 0, 1,
            ]);
            let uMVTranslateConstY = MatrixTranspose([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 2, 0, 1,
            ]);
            let uMVTranslateConstZ = MatrixTranspose([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 2, 1,
            ]);
            let uMVTranslateConstmX = MatrixTranspose([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            -2, 0, 0, 1,
            ]);
            let uMVTranslateConstmY = MatrixTranspose([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, -2, 0, 1,
            ]);
            let uMVTranslateConstmZ = MatrixTranspose([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, -2, 1,
            ]);
            let uMVTranslateZ = MatrixTranspose([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            translateX, translateY, translateZ, 1,
            ]);
            let uMVTranslateZ2 = MatrixTranspose([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            translateX2, translateY2, translateZ2, 1,
            ]);

            let uMVRotZ = MatrixTranspose([
            +Math.cos(angleZ*Math.PI/180.0),+Math.sin(angleZ*Math.PI/180.0),0,0,
            -Math.sin(angleZ*Math.PI/180.0),+Math.cos(angleZ*Math.PI/180.0),0,0,
            0,0,1,0,
            0,0,0,1
            ]);

            let uMVRotY = MatrixTranspose([
            +Math.cos(angleY*Math.PI/180.0),0,-Math.sin(angleY*Math.PI/180.0),0,
            0,1,0,0,
            +Math.sin(angleY*Math.PI/180.0),0,+Math.cos(angleY*Math.PI/180.0),0,
            0,0,0,1
            ]);

            let uMVRotX = MatrixTranspose([
            1,0,0,0,
            0,+Math.cos(angleX*Math.PI/180.0),+Math.sin(angleX*Math.PI/180.0),0,
            0,-Math.sin(angleX*Math.PI/180.0),+Math.cos(angleX*Math.PI/180.0),0,
            0,0,0,1
            ]);
       
            uMVMatrix = MatrixMul(uMVRotX,uMVMatrix);
            uMVMatrix = MatrixMul(uMVRotY,uMVMatrix);
            uMVMatrix = MatrixMul(uMVRotZ,uMVMatrix);
            uMVMatrix = MatrixMul(uMVTranslateZ,uMVMatrix);

           
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
            gl.clearColor(1.0,1.0,1.0,1.0);
            gl.clearDepth(1.0);                
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            gl.useProgram(shaderProgram)
            gl.enable(gl.DEPTH_TEST);          
            gl.depthFunc(gl.LEQUAL);            
        
            gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uPMatrix"), false, new Float32Array(uPMatrix)); 
            gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMVMatrix"), false, new Float32Array(MatrixTranspose(uMVMatrix)));
            gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexPosition"));  
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
            gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexPosition"), vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
            gl.enableVertexAttribArray(gl.getAttribLocation(shaderProgram, "aVertexColor"));  
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
            gl.vertexAttribPointer(gl.getAttribLocation(shaderProgram, "aVertexColor"), vertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
           

       
         for (let y = 0; y < 7; y++) {

                for (let x = 0; x < 7; x++) {
            
                uMVMatrix = MatrixMul(uMVMatrix,uMVTranslateConstX); 

                    if (aMap7x7[x + y * 7] == 1) { 

                        gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMVMatrix"), false, new Float32Array(MatrixTranspose(uMVMatrix))); 
                        gl.uniform1f(gl.getUniformLocation(shaderProgram, "uBrightness"), 0.8);
                        gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*3);
                    }
                }

                    uMVMatrix = MatrixMul(uMVMatrix,uMVTranslateConstY); 

                    for (let x = 0; x < 7; x++) {

                        uMVMatrix = MatrixMul(uMVMatrix,uMVTranslateConstmX); 
                    }
         }

        //Pionek
        uMVMatrix = MatrixMul(uMVMatrix,uMVTranslateConstmX);
        uMVMatrix = MatrixMul(uMVMatrix,uMVTranslateZ2);
        gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "uMVMatrix"), false, new Float32Array(MatrixTranspose(uMVMatrix))); 
        gl.uniform1f(gl.getUniformLocation(shaderProgram, "uBrightness"), 0.9);
        gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems*3); 
        setTimeout(Tick,100);
        }


        function keydown(e) {
            //--------------------zmienione przyciski
            if(e.keyCode == 87) angleX += 1.0; //w
            if(e.keyCode == 83) angleX -= 1.0; //s
            if(e.keyCode == 68) angleY += 1.0; //d
            if(e.keyCode == 65) angleY -= 1.0; //a
            if(e.keyCode == 81) angleZ += 1.0; //q
            if(e.keyCode == 69) angleZ -= 1.0; //e
            if(e.keyCode == 39) translateX += 1.0; //left
            if(e.keyCode == 37) translateX -= 1.0; //up
            if(e.keyCode == 38) translateY += 1.0; //right
            if(e.keyCode == 40) translateY -= 1.0; //down
            if(e.keyCode == 188) translateZ += 1.0; //,
            if(e.keyCode == 190) translateZ -= 1.0; //.
            if(e.keyCode == 80) translateX2 += 0.1; //i
            if(e.keyCode == 73) translateX2 -= 0.1; //p
            if(e.keyCode == 79) translateY2 += 0.1; //o
            if(e.keyCode == 75) translateY2 -= 0.1; //k
            if(e.keyCode == 74) translateZ2 += 0.1; //j
            if(e.keyCode == 76) translateZ2 -= 0.1; //l
        }    
    </script>
</head>
<body onload="startGL()" onkeydown="keydown(event)">
    <canvas id="canvas3D" width="640" height="480" style="border: solid black 1px"></canvas>
</body>
</html>
